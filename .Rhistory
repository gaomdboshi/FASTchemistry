library(biomaRt)
# 让用户输入想查询的基因名称
gene_name <- readline(prompt = "ACTN3")  # 用户输入基因名
# 连接到Ensembl Gene数据库来查询基因的Ensembl Gene ID
ensembl_gene <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")
# 根据基因名称查询Ensembl Gene ID
gene_id_info <- getBM(attributes = c('ensembl_gene_id'),
filters = 'external_gene_name', values = gene_name, mart = ensembl_gene)
# 让用户输入想查询的基因名称
gene_name <- readline(prompt = "ACTN3")  # 用户输入基因名
# 连接到Ensembl Gene数据库来查询基因的Ensembl Gene ID
ensembl_gene <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")
# 根据基因名称查询Ensembl Gene ID
gene_id_info <- getBM(attributes = c('ensembl_gene_id'),
filters = 'external_gene_name', values = gene_name, mart = ensembl_gene)
library(biomaRt)
# 让用户输入想查询的基因名称
gene_name <- readline(prompt = "ACTN3")  # 用户输入基因名
# 连接到Ensembl Gene数据库来查询基因的Ensembl Gene ID
ensembl_gene <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")
# 根据基因名称查询Ensembl Gene ID
gene_id_info <- getBM(attributes = c('ensembl_gene_id'),
filters = 'external_gene_name', values = gene_name, mart = ensembl_gene)
gc()
library(biomaRt)
# 让用户输入想查询的基因名称
gene_name <- readline(prompt = "ACTN3")  # 用户输入基因名
gene_name <- iconv(gene_name, from = "latin1", to = "UTF-8")  # 确保为UTF-8编码
# 连接到Ensembl Gene数据库来查询基因的Ensembl Gene ID
ensembl_gene <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")
# 根据基因名称查询Ensembl Gene ID
gene_id_info <- getBM(attributes = c('ensembl_gene_id'),
filters = 'external_gene_name', values = gene_name, mart = ensembl_gene)
# 检查查询结果
if (nrow(gene_id_info) == 0) {
cat("没有找到该基因的相关信息，请检查基因名称是否正确。\n")
} else {
cat("查询到的基因ID为：", gene_id_info$ensembl_gene_id[1], "\n")
}
library(biomaRt)
# 让用户输入想查询的基因名称
gene_name <- readline(prompt = "请输入基因名称：")  # 用户输入基因名
# 让用户输入想查询的基因名称
gene_name <- readline(prompt = "ACTN3：")  # 用户输入基因名
gene_name <- iconv(gene_name, from = "latin1", to = "UTF-8")  # 确保为UTF-8编码
# 连接到Ensembl Gene数据库来查询基因的Ensembl Gene ID
ensembl_gene <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")
# 根据基因名称查询Ensembl Gene ID
gene_id_info <- getBM(attributes = c('ensembl_gene_id'),
filters = 'external_gene_name', values = gene_name, mart = ensembl_gene)
# 检查查询结果
if (nrow(gene_id_info) == 0) {
cat("没有找到该基因的相关信息，请检查基因名称是否正确。\n")
} else {
cat("查询到的基因ID为：", gene_id_info$ensembl_gene_id[1], "\n")
}
library(biomaRt)
# 让用户输入想查询的基因名称
gene_name <- readline(prompt = "ACTN3")  # 用户输入基因名
gene_name <- iconv(gene_name, from = "latin1", to = "UTF-8")  # 确保为UTF-8编码
# 连接到Ensembl Gene数据库来查询基因的Ensembl Gene ID
ensembl_gene <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")
# 根据基因名称查询Ensembl Gene ID
gene_id_info <- getBM(attributes = c('ensembl_gene_id'),
filters = 'external_gene_name', values = gene_name, mart = ensembl_gene)
# 根据基因名称查询Ensembl Gene ID
gene_id_info <- getBM(attributes = c('ensembl_gene_id'),
filters = 'external_gene_name', values = gene_name, mart = ensembl_gene)
# 让用户输入想查询的基因名称
gene_name <- readline(prompt = "ASAH2")  # 用户输入基因名
# 连接到Ensembl Gene数据库来查询基因的Ensembl Gene ID
ensembl_gene <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")
# 根据基因名称查询Ensembl Gene ID
gene_id_info <- getBM(attributes = c('ensembl_gene_id'),
filters = 'external_gene_name', values = gene_name, mart = ensembl_gene)
# 查看查询结果，确认是否返回了基因ID
if (nrow(gene_id_info) == 0) {
cat("没有找到该基因的相关信息，请检查基因名称是否正确。\n")
} else {
cat("查询到的基因ID为：", gene_id_info$ensembl_gene_id[1], "\n")
# 连接到Ensembl SNP数据库来查询SNP信息
ensembl_snp <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
# 使用查询得到的 Ensembl Gene ID 来查询该基因的所有SNP
gene_id <- gene_id_info$ensembl_gene_id[1]  # 使用返回的基因ID
# 查询该基因的所有SNP信息，使用有效的属性
gene_info <- getBM(attributes = c('refsnp_id', 'consequence_type_tv', 'allele', 'allele_1'),
filters = 'ensembl_gene', values = gene_id, mart = ensembl_snp)
# 查看基因信息，确认返回的列
print(gene_info)
# 标注所有变异类型
gene_info$mutation_type <- ifelse(gene_info$consequence_type_tv == "missense_variant",
"Missense Variant", "Other Variant")
# 过滤出错义突变（missense variant）
missense_snp <- gene_info[gene_info$consequence_type_tv == "missense_variant", ]
# 输出错义突变信息
if (nrow(missense_snp) > 0) {
print(missense_snp)
} else {
cat("没有找到错义突变（missense variant）\n")
}
}
library(biomaRt)
library(biomaRt)
# 让用户输入想查询的基因名称
gene_name <- readline(prompt = "ASAH2")  # 用户输入基因名
# 让用户输入想查询的基因名称
gene_name <- readline(prompt = "ASAH2")  # 用户输入基因名
# 连接到Ensembl Gene数据库来查询基因的Ensembl Gene ID
ensembl_gene <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")
# 根据基因名称查询Ensembl Gene ID
gene_id_info <- getBM(attributes = c('ensembl_gene_id'),
filters = 'external_gene_name', values = gene_name, mart = ensembl_gene)
library(biomaRt)
# 让用户输入想查询的基因名称
gene_name <- readline(prompt = "ASAH2")  # 用户输入基因名
# 连接到Ensembl Gene数据库来查询基因的Ensembl Gene ID
ensembl_gene <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")
# 根据基因名称查询Ensembl Gene ID
gene_id_info <- getBM(attributes = c('ensembl_gene_id'),
filters = 'external_gene_name', values = gene_name, mart = ensembl_gene)
# 查看查询结果，确认是否返回了基因ID
if (nrow(gene_id_info) == 0) {
cat("没有找到该基因的相关信息，请检查基因名称是否正确。\n")
} else {
cat("查询到的基因ID为：", gene_id_info$ensembl_gene_id[1], "\n")
# 连接到Ensembl SNP数据库来查询SNP信息
ensembl_snp <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
# 使用查询得到的 Ensembl Gene ID 来查询该基因的所有SNP
gene_id <- gene_id_info$ensembl_gene_id[1]  # 使用返回的基因ID
# 查询该基因的所有SNP信息，使用有效的属性
gene_info <- getBM(attributes = c('refsnp_id', 'consequence_type_tv', 'allele', 'allele_1'),
filters = 'ensembl_gene', values = gene_id, mart = ensembl_snp)
# 查看基因信息，确认返回的列
print(gene_info)
# 标注所有变异类型
gene_info$mutation_type <- ifelse(gene_info$consequence_type_tv == "missense_variant",
"Missense Variant", "Other Variant")
# 过滤出错义突变（missense variant）
missense_snp <- gene_info[gene_info$consequence_type_tv == "missense_variant", ]
# 输出错义突变信息
if (nrow(missense_snp) > 0) {
print(missense_snp)
} else {
cat("没有找到错义突变（missense variant）\n")
}
}
library(biomaRt)
# 让用户输入想查询的基因名称
gene_name <- readline(prompt = "ASAH2")  # 用户输入基因名
gene_name <- iconv(gene_name, from = "latin1", to = "UTF-8")  # 确保为UTF-8编码
# 连接到Ensembl Gene数据库来查询基因的Ensembl Gene ID
ensembl_gene <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")
# 根据基因名称查询Ensembl Gene ID
gene_id_info <- getBM(attributes = c('ensembl_gene_id'),
filters = 'external_gene_name', values = gene_name, mart = ensembl_gene)
library(biomaRt)
# 设置基因名称
gene_name <- "ASAH2"  # 这里您可以修改为任何您需要查询的基因名
# 确保基因名为UTF-8编码
gene_name <- iconv(gene_name, from = "latin1", to = "UTF-8")
# 连接到Ensembl Gene数据库来查询基因的Ensembl Gene ID
ensembl_gene <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")
# 根据基因名称查询Ensembl Gene ID
gene_id_info <- getBM(attributes = c('ensembl_gene_id'),
filters = 'external_gene_name', values = gene_name, mart = ensembl_gene)
# 查看查询结果，确认是否返回了基因ID
if (nrow(gene_id_info) == 0) {
cat("没有找到该基因的相关信息，请检查基因名称是否正确。\n")
} else {
cat("查询到的基因ID为：", gene_id_info$ensembl_gene_id[1], "\n")
# 连接到Ensembl SNP数据库来查询该基因的所有SNP
ensembl_snp <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
# 使用查询得到的 Ensembl Gene ID 来查询该基因的所有SNP
gene_id <- gene_id_info$ensembl_gene_id[1]  # 使用返回的基因ID
# 查询该基因的所有SNP信息，使用有效的属性
gene_info <- getBM(attributes = c('refsnp_id', 'consequence_type_tv', 'allele', 'allele_1'),
filters = 'ensembl_gene', values = gene_id, mart = ensembl_snp)
# 查看基因信息，确认返回的列
print(gene_info)
# 标注所有变异类型
gene_info$mutation_type <- ifelse(gene_info$consequence_type_tv == "missense_variant",
"Missense Variant", "Other Variant")
# 过滤出错义突变（missense variant）
missense_snp <- gene_info[gene_info$consequence_type_tv == "missense_variant", ]
# 输出错义突变信息
if (nrow(missense_snp) > 0) {
print(missense_snp)
} else {
cat("没有找到错义突变（missense variant）\n")
}
}
library(biomaRt)
# 设置基因名称
gene_name <- "ACTN3"  # 这里您可以修改为任何您需要查询的基因名
# 确保基因名为UTF-8编码
gene_name <- iconv(gene_name, from = "latin1", to = "UTF-8")
# 连接到Ensembl Gene数据库来查询基因的Ensembl Gene ID
ensembl_gene <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")
# 根据基因名称查询Ensembl Gene ID
gene_id_info <- getBM(attributes = c('ensembl_gene_id'),
filters = 'external_gene_name', values = gene_name, mart = ensembl_gene)
# 查看查询结果，确认是否返回了基因ID
if (nrow(gene_id_info) == 0) {
cat("没有找到该基因的相关信息，请检查基因名称是否正确。\n")
} else {
cat("查询到的基因ID为：", gene_id_info$ensembl_gene_id[1], "\n")
# 连接到Ensembl SNP数据库来查询该基因的所有SNP
ensembl_snp <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
# 使用查询得到的 Ensembl Gene ID 来查询该基因的所有SNP
gene_id <- gene_id_info$ensembl_gene_id[1]  # 使用返回的基因ID
# 查询该基因的所有SNP信息，使用有效的属性
gene_info <- getBM(attributes = c('refsnp_id', 'consequence_type_tv', 'allele', 'allele_1'),
filters = 'ensembl_gene', values = gene_id, mart = ensembl_snp)
# 查看基因信息，确认返回的列
print(gene_info)
# 标注所有变异类型
gene_info$mutation_type <- ifelse(gene_info$consequence_type_tv == "missense_variant",
"Missense Variant", "Other Variant")
# 过滤出错义突变（missense variant）
missense_snp <- gene_info[gene_info$consequence_type_tv == "missense_variant", ]
# 输出错义突变信息
if (nrow(missense_snp) > 0) {
print(missense_snp)
} else {
cat("没有找到错义突变（missense variant）\n")
}
}
View(missense_snp)
View(missense_snp)
# 保存错义突变信息为CSV文件
write.csv(missense_snp, file = paste0(gene_name, "_missense_snp.csv"), row.names = FALSE)
library(biomaRt)
# 设置基因名称
gene_name <- "A1BG"  # 这里您可以修改为任何您需要查询的基因名
# 确保基因名为UTF-8编码
gene_name <- iconv(gene_name, from = "latin1", to = "UTF-8")
# 连接到Ensembl Gene数据库来查询基因的Ensembl Gene ID
ensembl_gene <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")
# 根据基因名称查询Ensembl Gene ID
gene_id_info <- getBM(attributes = c('ensembl_gene_id'),
filters = 'external_gene_name', values = gene_name, mart = ensembl_gene)
# 查看查询结果，确认是否返回了基因ID
if (nrow(gene_id_info) == 0) {
cat("没有找到该基因的相关信息，请检查基因名称是否正确。\n")
} else {
cat("查询到的基因ID为：", gene_id_info$ensembl_gene_id[1], "\n")
# 连接到Ensembl SNP数据库来查询该基因的所有SNP
ensembl_snp <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
# 使用查询得到的 Ensembl Gene ID 来查询该基因的所有SNP
gene_id <- gene_id_info$ensembl_gene_id[1]  # 使用返回的基因ID
# 查询该基因的所有SNP信息，使用有效的属性
gene_info <- getBM(attributes = c('refsnp_id', 'consequence_type_tv', 'allele', 'allele_1'),
filters = 'ensembl_gene', values = gene_id, mart = ensembl_snp)
# 查看基因信息，确认返回的列
print(gene_info)
# 标注所有变异类型
gene_info$mutation_type <- ifelse(gene_info$consequence_type_tv == "missense_variant",
"Missense Variant", "Other Variant")
# 过滤出错义突变（missense variant）
missense_snp <- gene_info[gene_info$consequence_type_tv == "missense_variant", ]
# 输出错义突变信息
if (nrow(missense_snp) > 0) {
print(missense_snp)
} else {
cat("没有找到错义突变（missense variant）\n")
}
}
# 保存错义突变信息为CSV文件
write.csv(missense_snp, file = paste0(gene_name, "_missense_snp.csv"), row.names = FALSE)
View(missense_snp)
# 读取两个CSV文件
df1 <- read.csv("hg38_ukb_ppp_pqtl_cis_1mb_A1BG_P04217_OID30771_v1_Inflammation_II.txt")  # 替换为你文件的路径
df2 <- read.csv("A1BG_missense_snp.csv")  # 替换为你文件的路径
# 获取交集的完整行（根据"SNP"列）
intersection_df <- merge(df1, df2, by = "SNP", all = FALSE)
# 打印交集
print(intersection_df)
View(df1)
View(df2)
# 读取两个CSV文件
df1 <- read.delim("hg38_ukb_ppp_pqtl_cis_1mb_A1BG_P04217_OID30771_v1_Inflammation_II.txt", sep = "\t")
View(df1)
# 替换为你文件的路径
df2 <- read.csv("A1BG_missense_snp.csv")  # 替换为你文件的路径
# 获取交集的完整行（根据"SNP"列）
intersection_df <- merge(df1, df2, by = "SNP", all = FALSE)
# 打印交集
print(intersection_df)
View(intersection_df)
library(biomaRt)
# 设置基因名称
gene_name <- "ACTN3"  # 这里您可以修改为任何您需要查询的基因名
# 确保基因名为UTF-8编码
gene_name <- iconv(gene_name, from = "latin1", to = "UTF-8")
# 连接到Ensembl Gene数据库来查询基因的Ensembl Gene ID
ensembl_gene <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")
library(biomaRt)
# 连接到 Ensembl 数据库
mart <- useMart("ENSEMBL_MART_ENSEMBL", host = "https://www.ensembl.org")
library(biomaRt)
# 连接到 Ensembl 数据库
mart <- useMart("ENSEMBL_MART_ENSEMBL", host = "https://www.ensembl.org")
library(biomaRt)
# 设置基因名称
gene_name <- "ACTN3"  # 这里您可以修改为任何您需要查询的基因名
# 确保基因名为UTF-8编码
gene_name <- iconv(gene_name, from = "latin1", to = "UTF-8")
# 连接到Ensembl Gene数据库来查询基因的Ensembl Gene ID
ensembl_gene <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")
# 确保基因名为UTF-8编码
gene_name <- iconv(gene_name, from = "latin1", to = "UTF-8")
# 连接到Ensembl Gene数据库来查询基因的Ensembl Gene ID
ensembl_gene <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")
# 根据基因名称查询Ensembl Gene ID
gene_id_info <- getBM(attributes = c('ensembl_gene_id'),
filters = 'external_gene_name', values = gene_name, mart = ensembl_gene)
# 查看查询结果，确认是否返回了基因ID
if (nrow(gene_id_info) == 0) {
cat("没有找到该基因的相关信息，请检查基因名称是否正确。\n")
} else {
cat("查询到的基因ID为：", gene_id_info$ensembl_gene_id[1], "\n")
# 连接到Ensembl SNP数据库来查询该基因的所有SNP
ensembl_snp <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
# 使用查询得到的 Ensembl Gene ID 来查询该基因的所有SNP
gene_id <- gene_id_info$ensembl_gene_id[1]  # 使用返回的基因ID
# 查询该基因的所有SNP信息，使用有效的属性
gene_info <- getBM(attributes = c('refsnp_id', 'consequence_type_tv', 'allele', 'allele_1'),
filters = 'ensembl_gene', values = gene_id, mart = ensembl_snp)
# 查看基因信息，确认返回的列
print(gene_info)
# 标注所有变异类型
gene_info$mutation_type <- ifelse(gene_info$consequence_type_tv == "missense_variant",
"Missense Variant", "Other Variant")
# 过滤出错义突变（missense variant）
missense_snp <- gene_info[gene_info$consequence_type_tv == "missense_variant", ]
# 输出错义突变信息
if (nrow(missense_snp) > 0) {
print(missense_snp)
} else {
cat("没有找到错义突变（missense variant）\n")
}
}
# 保存错义突变信息为CSV文件
write.csv(missense_snp, file = paste0(gene_name, "_missense_snp.csv"), row.names = FALSE)
# 保存错义突变信息为CSV文件
write.csv(missense_snp, file = paste0(gene_name, "_missense_snp.csv"), row.names = FALSE)
library(biomaRt)
# 设置基因名称
gene_name <- "ACTN3"  # 这里您可以修改为任何您需要查询的基因名
# 确保基因名为UTF-8编码
gene_name <- iconv(gene_name, from = "latin1", to = "UTF-8")
# 连接到Ensembl Gene数据库来查询基因的Ensembl Gene ID
ensembl_gene <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")
# 连接到Ensembl Gene数据库来查询基因的Ensembl Gene ID
ensembl_gene <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")
# 连接到Ensembl Gene数据库来查询基因的Ensembl Gene ID
ensembl_gene <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")
library(biomaRt)
# 设置基因名称
gene_name <- "ACTN3"  # 这里您可以修改为任何您需要查询的基因名
# 确保基因名为UTF-8编码
gene_name <- iconv(gene_name, from = "latin1", to = "UTF-8")
# 连接到Ensembl Gene数据库来查询基因的Ensembl Gene ID
ensembl_gene <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")
# 根据基因名称查询Ensembl Gene ID
gene_id_info <- getBM(attributes = c('ensembl_gene_id'),
filters = 'external_gene_name', values = gene_name, mart = ensembl_gene)
# 查看查询结果，确认是否返回了基因ID
if (nrow(gene_id_info) == 0) {
cat("没有找到该基因的相关信息，请检查基因名称是否正确。\n")
} else {
cat("查询到的基因ID为：", gene_id_info$ensembl_gene_id[1], "\n")
# 连接到Ensembl SNP数据库来查询该基因的所有SNP
ensembl_snp <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
# 使用查询得到的 Ensembl Gene ID 来查询该基因的所有SNP
gene_id <- gene_id_info$ensembl_gene_id[1]  # 使用返回的基因ID
# 查询该基因的所有SNP信息，使用有效的属性
gene_info <- getBM(attributes = c('refsnp_id', 'consequence_type_tv', 'allele', 'allele_1'),
filters = 'ensembl_gene', values = gene_id, mart = ensembl_snp)
# 查看基因信息，确认返回的列
print(gene_info)
# 标注所有变异类型
gene_info$mutation_type <- ifelse(gene_info$consequence_type_tv == "missense_variant",
"Missense Variant", "Other Variant")
# 过滤出错义突变（missense variant）
missense_snp <- gene_info[gene_info$consequence_type_tv == "missense_variant", ]
# 输出错义突变信息
if (nrow(missense_snp) > 0) {
print(missense_snp)
} else {
cat("没有找到错义突变（missense variant）\n")
}
}
library(biomaRt)
# 设置基因名称
gene_name <- "ACTN3"  # 这里您可以修改为任何您需要查询的基因名
# 确保基因名为UTF-8编码
gene_name <- iconv(gene_name, from = "latin1", to = "UTF-8")
# 连接到Ensembl Gene数据库来查询基因的Ensembl Gene ID
ensembl_gene <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")
# 连接到Ensembl Gene数据库来查询基因的Ensembl Gene ID
ensembl_gene <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")
# 根据基因名称查询Ensembl Gene ID
gene_id_info <- getBM(attributes = c('ensembl_gene_id'),
filters = 'external_gene_name', values = gene_name, mart = ensembl_gene)
# 查看查询结果，确认是否返回了基因ID
if (nrow(gene_id_info) == 0) {
cat("没有找到该基因的相关信息，请检查基因名称是否正确。\n")
} else {
cat("查询到的基因ID为：", gene_id_info$ensembl_gene_id[1], "\n")
# 连接到Ensembl SNP数据库来查询该基因的所有SNP
ensembl_snp <- useMart("ENSEMBL_MART_SNP", dataset = "hsapiens_snp")
# 使用查询得到的 Ensembl Gene ID 来查询该基因的所有SNP
gene_id <- gene_id_info$ensembl_gene_id[1]  # 使用返回的基因ID
# 查询该基因的所有SNP信息，使用有效的属性
gene_info <- getBM(attributes = c('refsnp_id', 'consequence_type_tv', 'allele', 'allele_1'),
filters = 'ensembl_gene', values = gene_id, mart = ensembl_snp)
# 查看基因信息，确认返回的列
print(gene_info)
# 标注所有变异类型
gene_info$mutation_type <- ifelse(gene_info$consequence_type_tv == "missense_variant",
"Missense Variant", "Other Variant")
# 过滤出错义突变（missense variant）
missense_snp <- gene_info[gene_info$consequence_type_tv == "missense_variant", ]
# 输出错义突变信息
if (nrow(missense_snp) > 0) {
print(missense_snp)
} else {
cat("没有找到错义突变（missense variant）\n")
}
}
# 保存错义突变信息为CSV文件
write.csv(missense_snp, file = paste0(gene_name, "_missense_snp.csv"), row.names = FALSE)
setwd("D:/桌面/自创包/FASTchemistry")
# 重新构建包文档
devtools::document()
# 安装包
devtools::install()
result <- get_missense_snp("ACTN3")
# 安装并加载包
devtools::install_github("gaomdboshi/FASTchemistry")
library(FASTchemistry)
# 使用你刚才添加的函数
result <- get_missense_snp("ACTN3")
